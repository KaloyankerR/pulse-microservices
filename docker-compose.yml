services:
  # Kong API Gateway (DB-less mode)
  kong:
    image: kong:3.4
    container_name: kong-gateway
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    ports:
      - "8000:8000"  # Kong proxy
      - "8001:8001"  # Kong admin API
    volumes:
      - ./config/kong.yml:/kong/kong.yml:ro
    networks:
      - pulse-network
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 30s
    restart: unless-stopped
    depends_on:
      - user-service
      - post-service
      - social-service
      - messaging-service
      - notification-service

  # User Service (Node.js)
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
      target: development
    container_name: pulse-user-service
    environment:
      NODE_ENV: development
      PORT: 8081
      DATABASE_URL: postgresql://pulse_user:pulse_user@host.docker.internal:5432/pulse_users
      JWT_SECRET: 5b41d6a0c1adfd2804d730d26f7a4fd1
      JWT_EXPIRES_IN: 24h
      JWT_REFRESH_EXPIRES_IN: 7d
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 1000
      BCRYPT_ROUNDS: 10
      CORS_ORIGIN: http://localhost:3000
      LOG_LEVEL: debug
      ADMIN_EMAIL: admin@pulse.com
      ADMIN_PASSWORD: admin123
      GOOGLE_CLIENT_ID: 324113479892-7cq7ntoptj8cfn5u65ahssm5af55hdmd
      GOOGLE_CLIENT_SECRET: your-google-client-secret
      GOOGLE_CALLBACK_URL: http://localhost:8000/api/v1/auth/google/callback
      SESSION_SECRET: dev-session-secret-change-in-production
      SESSION_MAX_AGE: 86400000
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./user-service:/app
      - /app/node_modules
      - ./user-service/logs:/app/logs
    restart: unless-stopped
    networks:
      - pulse-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Post Service (Go)
  post-service:
    build:
      context: ./post-service
      dockerfile: Dockerfile
    container_name: pulse-post-service
    environment:
      DB_HOST: host.docker.internal
      DB_PORT: 5432
      DB_USER: pulse_user
      DB_PASSWORD: pulse_user
      DB_NAME: pulse_posts
      DB_SSLMODE: disable
      JWT_SECRET: 5b41d6a0c1adfd2804d730d26f7a4fd1
      PORT: 8082
      LOG_LEVEL: info
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: unless-stopped
    networks:
      - pulse-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Social Service (Node.js)
  social-service:
    build:
      context: ./social-service
      dockerfile: Dockerfile
    container_name: pulse-social-service
    ports:
      - "8085:8085"
    environment:
      NODE_ENV: development
      PORT: 8085
      DATABASE_URL: postgresql://pulse_user:pulse_user@host.docker.internal:5432/pulse_social
      REDIS_URL: redis://redis:6379
      RABBITMQ_URL: amqp://rabbitmq:5672
      JWT_SECRET: 5b41d6a0c1adfd2804d730d26f7a4fd1
      CORS_ORIGIN: http://localhost:3000
      LOG_LEVEL: info
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./social-service:/app
      - /app/node_modules
      - ./social-service/logs:/app/logs
    restart: unless-stopped
    networks:
      - pulse-network
    depends_on:
      - redis
      - rabbitmq
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:8085/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis (for messaging and caching)
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
      - ./config/redis.yml:/usr/local/etc/redis/redis.yml:ro
    restart: unless-stopped
    networks:
      - pulse-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # RabbitMQ (for event messaging)
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./config/rabbitmq.yml:/etc/rabbitmq/rabbitmq.yml:ro
    restart: unless-stopped
    networks:
      - pulse-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Messaging Service (Go)
  messaging-service:
    build:
      context: ./messaging-service
      dockerfile: Dockerfile
    container_name: pulse-messaging-service
    ports:
      - "8084:8084"
    environment:
      PORT: 8084
      ENVIRONMENT: production
      MONGODB_URL: mongodb://pulse_user:pulse_user@mongodb:27017/messaging_db?authSource=admin
      MONGODB_NAME: messaging_db
      REDIS_URL: redis://redis:6379
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672/
      JWT_SECRET: 5b41d6a0c1adfd2804d730d26f7a4fd1
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      - redis
      - rabbitmq
      - mongodb
    restart: unless-stopped
    networks:
      - pulse-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8084/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MongoDB
  mongodb:
    image: mongo:7.0
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: pulse_user
      MONGO_INITDB_ROOT_PASSWORD: pulse_user
      MONGO_INITDB_DATABASE: pulse_notifications
    volumes:
      - mongodb_data:/data/db
      - ./config/mongodb:/docker-entrypoint-initdb.d
    restart: unless-stopped
    networks:
      - pulse-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Notification Service (Node.js)
  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
      target: development
    container_name: pulse-notification-service
    ports:
      - "8086:8086"
    environment:
      NODE_ENV: development
      PORT: 8086
      MONGODB_URI: mongodb://pulse_user:pulse_user@mongodb:27017/pulse_notifications?authSource=admin
      REDIS_URL: redis://redis:6379
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672/
      JWT_SECRET: 5b41d6a0c1adfd2804d730d26f7a4fd1
      CORS_ORIGIN: http://localhost:3000
      LOG_LEVEL: info
    volumes:
      - ./notification-service:/app
      - /app/node_modules
      - ./notification-service/logs:/app/logs
    depends_on:
      - redis
      - rabbitmq
      - mongodb
    restart: unless-stopped
    networks:
      - pulse-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:8086/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # SonarQube for Code Quality
  sonarqube:
    image: sonarqube:community
    container_name: sonarqube
    ports:
      - "9001:9000"
    environment:
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
      - ./config/sonarqube.yml:/opt/sonarqube/conf/sonar.yml:ro
    networks:
      - pulse-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9000/api/system/status"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - pulse-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Grafana for Metrics Visualization
  grafana:
    image: grafana/grafana:10.2.2
    container_name: grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3001
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
      - ./config/grafana/dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml:ro
      - ./config/grafana/dashboard-overview.json:/etc/grafana/provisioning/dashboards/dashboard-overview.json:ro
    networks:
      - pulse-network
    depends_on:
      - prometheus
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s


volumes:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  redis_data:
  rabbitmq_data:
  mongodb_data:
  prometheus_data:
  grafana_data:

networks:
  pulse-network:
    driver: bridge
