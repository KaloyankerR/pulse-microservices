name: Microservices CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

jobs:
  build-and-test:
    name: Build & Test Core Services
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        service: [user-service, social-service, messaging-service, post-service]
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      
      rabbitmq:
        image: rabbitmq:3-management-alpine
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5672:5672
          - 15672:15672
      
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: pulse_user
          MONGO_INITDB_ROOT_PASSWORD: pulse_user
          MONGO_INITDB_DATABASE: pulse_notifications
        options: >-
          --health-cmd "mongosh --eval \"db.adminCommand('ping')\""
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Node.js services (user-service, social-service)
      - name: Setup Node.js
        if: matrix.service == 'user-service' || matrix.service == 'social-service'
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install Node dependencies
        if: matrix.service == 'user-service' || matrix.service == 'social-service'
        working-directory: ./${{ matrix.service }}
        run: npm ci
      
      - name: Generate Prisma Client (Node services)
        if: matrix.service == 'user-service' || matrix.service == 'social-service'
        working-directory: ./${{ matrix.service }}
        run: npm run db:generate
      
      - name: Run Node tests
        if: matrix.service == 'user-service' || matrix.service == 'social-service'
        working-directory: ./${{ matrix.service }}
        run: npm test
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/postgres
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret-key-for-ci
      
      # Go services (messaging-service, post-service)
      - name: Setup Go
        if: matrix.service == 'messaging-service' || matrix.service == 'post-service'
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache-dependency-path: ${{ matrix.service }}/go.sum
      
      - name: Install Go dependencies
        if: matrix.service == 'messaging-service' || matrix.service == 'post-service'
        working-directory: ./${{ matrix.service }}
        run: |
          go mod download
          go mod verify
      
      - name: Run Go tests
        if: matrix.service == 'messaging-service' || matrix.service == 'post-service'
        working-directory: ./${{ matrix.service }}
        run: go test ./... -v
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/postgres?sslmode=disable
          REDIS_URL: redis://localhost:6379
          RABBITMQ_URL: amqp://guest:guest@localhost:5672/
          JWT_SECRET: test-secret-key-for-ci
      
      # Build Docker images for all services
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Docker Hub
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build Docker image (and push on main)
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          tags: |
            pulse-${{ matrix.service }}:test
            ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && format('{0}/pulse-{1}:latest', secrets.DOCKERHUB_USERNAME, matrix.service) || '' }}
            ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && format('{0}/pulse-{1}:{2}', secrets.DOCKERHUB_USERNAME, matrix.service, github.sha) || '' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Test summary
        run: |
          echo "‚úÖ ${{ matrix.service }} - Build and test completed successfully"
          echo "Docker image built: pulse-${{ matrix.service }}:test"

  # DISABLED: Build & Test Notification Service
  # build-and-test-notification:
  #   name: Build & Test Notification Service
  #   runs-on: ubuntu-latest
  #   
  #   services:
  #     mongodb:
  #       image: mongo:7.0
  #       env:
  #         MONGO_INITDB_ROOT_USERNAME: pulse_user
  #         MONGO_INITDB_ROOT_PASSWORD: pulse_user
  #         MONGO_INITDB_DATABASE: pulse_notifications
  #       options: >-
  #         --health-cmd "mongosh --eval \"db.adminCommand('ping')\""
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #       ports:
  #         - 27017:27017
  #     
  #     redis:
  #       image: redis:7-alpine
  #       options: >-
  #         --health-cmd "redis-cli ping"
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #       ports:
  #         - 6379:6379
  #     
  #     rabbitmq:
  #       image: rabbitmq:3-management-alpine
  #       options: >-
  #         --health-cmd "rabbitmq-diagnostics -q ping"
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #       ports:
  #         - 5672:5672
  #         - 15672:15672
  #   
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #     
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '18'
  #     
  #     - name: Install Node dependencies
  #       working-directory: ./notification-service
  #       run: npm ci
  #     
  #     - name: Run Node tests
  #       working-directory: ./notification-service
  #       run: npm test
  #       env:
  #         NODE_ENV: test
  #         MONGODB_URI: mongodb://localhost:27017/pulse_notifications
  #         REDIS_URL: redis://localhost:6379
  #         RABBITMQ_URL: amqp://guest:guest@localhost:5672/
  #         JWT_SECRET: test-secret-key-for-ci
  #     
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3
  #     
  #     - name: Build Docker image
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: ./notification-service
  #         push: false
  #         tags: pulse-notification-service:test
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max
  #     
  #     - name: Test summary
  #       run: |
  #         echo "‚úÖ notification-service - Build and test completed successfully"
  #         echo "Docker image built: pulse-notification-service:test"

  security-scan:
    name: Security Scan Core Services
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    strategy:
      matrix:
        service: [user-service, social-service, messaging-service, post-service]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Node.js security scan
      - name: Run npm audit (Node services)
        if: matrix.service == 'user-service' || matrix.service == 'social-service'
        working-directory: ./${{ matrix.service }}
        run: npm audit --audit-level=moderate
        continue-on-error: true
      
      # Go security scan
      - name: Run Gosec Security Scanner (Go services)
        if: matrix.service == 'messaging-service' || matrix.service == 'post-service'
        uses: securego/gosec@master
        with:
          args: '-no-fail -fmt json -out gosec-report.json ./${{ matrix.service }}/...'
        continue-on-error: true

  # DISABLED: Security Scan Notification Service
  # security-scan-notification:
  #   name: Security Scan Notification Service
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'pull_request'
  #   
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #     
  #     - name: Run npm audit (Notification service)
  #       working-directory: ./notification-service
  #       run: npm audit --audit-level=moderate
  #       continue-on-error: true

  pr-summary:
    name: PR Summary
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [build-and-test, security-scan]
    
    steps:
      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const coreBuildStatus = '${{ needs.build-and-test.result }}';
            const coreSecurityStatus = '${{ needs.security-scan.result }}';
            
            const statusEmoji = {
              'success': '‚úÖ',
              'failure': '‚ùå',
              'cancelled': '‚ö†Ô∏è',
              'skipped': '‚è≠Ô∏è'
            };
            
            const body = `## üöÄ Microservices CI Pipeline Results
            
            ### Core Services
            - ${statusEmoji[coreBuildStatus] || '‚ùì'} **Build & Test**: ${coreBuildStatus}
            - ${statusEmoji[coreSecurityStatus] || '‚ùì'} **Security Scan**: ${coreSecurityStatus}
            
            ### Notification Service
            - ‚è≠Ô∏è **Build & Test**: Disabled
            - ‚è≠Ô∏è **Security Scan**: Disabled
            
            ${coreBuildStatus === 'success' && coreSecurityStatus === 'success'
              ? 'üéâ All enabled checks passed! Ready for review.' 
              : '‚ö†Ô∏è Some checks failed. Please review the details above.'}
            
            ---
            *Notification service pipeline is currently disabled.*
            `;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
