name: Microservices CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      user-service: ${{ steps.filter.outputs.user-service }}
      social-service: ${{ steps.filter.outputs.social-service }}
      messaging-service: ${{ steps.filter.outputs.messaging-service }}
      post-service: ${{ steps.filter.outputs.post-service }}
    steps:
      - uses: actions/checkout@v4
      
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            user-service:
              - 'user-service/**'
            social-service:
              - 'social-service/**'
            messaging-service:
              - 'messaging-service/**'
            post-service:
              - 'post-service/**'

  test-node-services:
    needs: detect-changes
    if: |
      needs.detect-changes.outputs.user-service == 'true' ||
      needs.detect-changes.outputs.social-service == 'true'
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        service: [user-service, social-service]
        node-version: [18.x, 20.x]
        include:
          - service: user-service
            needs-postgres: true
          - service: social-service
            needs-postgres: true
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ${{ matrix.service == 'user-service' && 'pulse_users' || 'pulse_social' }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.service }}/package-lock.json
      
      - name: Install dependencies
        working-directory: ./${{ matrix.service }}
        run: npm ci
      
      - name: Generate Prisma Client
        working-directory: ./${{ matrix.service }}
        run: npm run db:generate
      
      - name: Run linter
        working-directory: ./${{ matrix.service }}
        run: npm run lint
        continue-on-error: true
      
      - name: Run tests
        working-directory: ./${{ matrix.service }}
        run: npm run test:coverage
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/${{ matrix.service == 'user-service' && 'pulse_users' || 'pulse_social' }}
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret-key-for-ci
          JWT_REFRESH_SECRET: test-refresh-secret-key-for-ci
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./${{ matrix.service }}/coverage/lcov.info
          flags: ${{ matrix.service }}
          name: ${{ matrix.service }}-coverage
        continue-on-error: true

  test-go-services:
    needs: detect-changes
    if: |
      needs.detect-changes.outputs.messaging-service == 'true' ||
      needs.detect-changes.outputs.post-service == 'true'
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        service: [messaging-service, post-service]
        go-version: ['1.21', '1.22']
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ${{ matrix.service == 'messaging-service' && 'pulse_messaging' || 'pulse_posts' }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      
      rabbitmq:
        image: rabbitmq:3-management-alpine
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5672:5672
          - 15672:15672
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache-dependency-path: ${{ matrix.service }}/go.sum
      
      - name: Install dependencies
        working-directory: ./${{ matrix.service }}
        run: |
          go mod download
          go mod verify
      
      - name: Run go fmt
        working-directory: ./${{ matrix.service }}
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Code is not formatted. Run 'go fmt ./...'"
            gofmt -s -l .
            exit 1
          fi
      
      - name: Run go vet
        working-directory: ./${{ matrix.service }}
        run: go vet ./...
      
      - name: Run tests
        working-directory: ./${{ matrix.service }}
        run: go test ./... -v -race -coverprofile=coverage.out -covermode=atomic
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/${{ matrix.service == 'messaging-service' && 'pulse_messaging' || 'pulse_posts' }}?sslmode=disable
          REDIS_URL: redis://localhost:6379
          RABBITMQ_URL: amqp://guest:guest@localhost:5672/
          JWT_SECRET: test-secret-key-for-ci
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./${{ matrix.service }}/coverage.out
          flags: ${{ matrix.service }}
          name: ${{ matrix.service }}-coverage
        continue-on-error: true

  build-docker-images:
    needs: [test-node-services, test-go-services]
    if: |
      always() &&
      (needs.test-node-services.result == 'success' || needs.test-node-services.result == 'skipped') &&
      (needs.test-go-services.result == 'success' || needs.test-go-services.result == 'skipped')
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        service: [user-service, social-service, messaging-service, post-service]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          push: false
          tags: pulse-${{ matrix.service }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      # Uncomment the following steps if you want to push to a container registry
      # - name: Login to Docker Hub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}
      # 
      # - name: Build and push Docker image
      #   uses: docker/build-push-action@v5
      #   with:
      #     context: ./${{ matrix.service }}
      #     push: true
      #     tags: |
      #       yourdockerhubusername/pulse-${{ matrix.service }}:${{ github.sha }}
      #       yourdockerhubusername/pulse-${{ matrix.service }}:latest
      #     cache-from: type=gha
      #     cache-to: type=gha,mode=max

