name: Microservices Pipeline

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*.*.*'
      - '*-service-v*.*.*'
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      service:
        description: 'Service to deploy (or "all" for all services)'
        required: true
        type: choice
        options:
          - all
          - user-service
          - social-service
          - notification-service
          - messaging-service
          - post-service
      environment:
        description: 'Deployment environment'
        required: true
        type: choice
        options:
          - production
          - staging
        default: 'staging'

# Prevent multiple workflow runs from running concurrently
# This will cancel in-progress runs when new ones are triggered
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DOCKER_REGISTRY: docker.io
  DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}

jobs:
  # ============================================================================
  # STAGE 1: BUILD - Build all microservices
  # ============================================================================
  
  build:
    name: Build ${{ matrix.service }}
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        service: [user-service, social-service, notification-service, messaging-service, post-service]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Node.js services (user-service, social-service, notification-service)
      - name: Setup Node.js
        if: matrix.service == 'user-service' || matrix.service == 'social-service' || matrix.service == 'notification-service'
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install Node dependencies
        if: matrix.service == 'user-service' || matrix.service == 'social-service' || matrix.service == 'notification-service'
        working-directory: ./${{ matrix.service }}
        run: npm ci
      
      - name: Generate Prisma Client
        if: matrix.service == 'user-service' || matrix.service == 'social-service'
        working-directory: ./${{ matrix.service }}
        run: npm run db:generate
      
      # Go services (messaging-service, post-service)
      - name: Setup Go
        if: matrix.service == 'messaging-service' || matrix.service == 'post-service'
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache-dependency-path: ${{ matrix.service }}/go.sum
      
      - name: Build Go service
        if: matrix.service == 'messaging-service' || matrix.service == 'post-service'
        working-directory: ./${{ matrix.service }}
        run: |
          go mod download
          go mod verify
          go build -v ./...
      
      - name: Build summary
        run: |
          echo "✅ ${{ matrix.service }} - Build completed successfully"

  # ============================================================================
  # STAGE 2: TEST - Run tests after successful build
  # ============================================================================
  
  test:
    name: Test ${{ matrix.service }}
    runs-on: ubuntu-latest
    needs: build
    
    strategy:
      fail-fast: false
      matrix:
        service: [user-service, social-service, notification-service, messaging-service, post-service]
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      
      rabbitmq:
        image: rabbitmq:3-management-alpine
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5672:5672
          - 15672:15672
      
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: pulse_user
          MONGO_INITDB_ROOT_PASSWORD: pulse_user
          MONGO_INITDB_DATABASE: pulse_notifications
        options: >-
          --health-cmd "mongosh --eval \"db.adminCommand('ping')\""
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Node.js services (user-service, social-service, notification-service)
      - name: Setup Node.js
        if: matrix.service == 'user-service' || matrix.service == 'social-service' || matrix.service == 'notification-service'
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install Node dependencies
        if: matrix.service == 'user-service' || matrix.service == 'social-service' || matrix.service == 'notification-service'
        working-directory: ./${{ matrix.service }}
        run: npm ci
      
      - name: Generate Prisma Client
        if: matrix.service == 'user-service' || matrix.service == 'social-service'
        working-directory: ./${{ matrix.service }}
        run: npm run db:generate
      
      - name: Run Node tests
        if: matrix.service == 'user-service' || matrix.service == 'social-service' || matrix.service == 'notification-service'
        working-directory: ./${{ matrix.service }}
        run: npm test
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/postgres
          MONGODB_URI: mongodb://pulse_user:pulse_user@localhost:27017/pulse_notifications
          REDIS_URL: redis://localhost:6379
          RABBITMQ_URL: amqp://guest:guest@localhost:5672/
          JWT_SECRET: test-secret-key-for-ci
      
      # Go services (messaging-service, post-service)
      - name: Setup Go
        if: matrix.service == 'messaging-service' || matrix.service == 'post-service'
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache-dependency-path: ${{ matrix.service }}/go.sum
      
      - name: Install Go dependencies
        if: matrix.service == 'messaging-service' || matrix.service == 'post-service'
        working-directory: ./${{ matrix.service }}
        run: |
          go mod download
          go mod verify
      
      - name: Run Go tests
        if: matrix.service == 'messaging-service' || matrix.service == 'post-service'
        working-directory: ./${{ matrix.service }}
        run: go test ./... -v
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/postgres?sslmode=disable
          REDIS_URL: redis://localhost:6379
          RABBITMQ_URL: amqp://guest:guest@localhost:5672/
          JWT_SECRET: test-secret-key-for-ci
      
      - name: Test summary
        run: |
          echo "✅ ${{ matrix.service }} - Tests passed"

  # ============================================================================
  # STAGE 3: SECURITY SCAN - Only on pull requests
  # ============================================================================
  
  security-scan:
    name: Security Scan ${{ matrix.service }}
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: test
    
    strategy:
      fail-fast: false
      matrix:
        service: [user-service, social-service, notification-service, messaging-service, post-service]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run npm audit (Node services)
        if: matrix.service == 'user-service' || matrix.service == 'social-service' || matrix.service == 'notification-service'
        working-directory: ./${{ matrix.service }}
        run: npm audit --audit-level=moderate
        continue-on-error: true
      
      - name: Run Gosec Security Scanner (Go services)
        if: matrix.service == 'messaging-service' || matrix.service == 'post-service'
        uses: securego/gosec@master
        with:
          args: '-no-fail -fmt json -out gosec-report.json ./${{ matrix.service }}/...'
        continue-on-error: true

  # ============================================================================
  # STAGE 4: DETERMINE DEPLOYMENT - Decide which services to deploy
  # ============================================================================
  
  determine-deployment:
    name: Determine Deployment
    runs-on: ubuntu-latest
    needs: test
    # Only run for: push to main, tags, or manual dispatch
    if: |
      github.event_name == 'push' || 
      github.event_name == 'workflow_dispatch' ||
      startsWith(github.ref, 'refs/tags/')
    
    outputs:
      services: ${{ steps.set-services.outputs.services }}
      deploy: ${{ steps.set-services.outputs.deploy }}
      should_deploy: ${{ steps.set-services.outputs.should_deploy }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Determine services to deploy
        id: set-services
        run: |
          SHOULD_DEPLOY="true"
          
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Manual trigger
            if [[ "${{ github.event.inputs.service }}" == "all" ]]; then
              SERVICES='["user-service","social-service","notification-service","messaging-service","post-service"]'
            else
              SERVICES='["${{ github.event.inputs.service }}"]'
            fi
            DEPLOY="${{ github.event.inputs.environment }}"
          
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # Tag-based deployment
            TAG="${{ github.ref_name }}"
            if [[ "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              # Full version tag (e.g., v1.0.0) - deploy all services
              SERVICES='["user-service","social-service","notification-service","messaging-service","post-service"]'
            else
              # Service-specific tag (e.g., user-service-v1.0.0)
              SERVICE=$(echo "$TAG" | sed 's/-v[0-9].*//')
              SERVICES="[\"$SERVICE\"]"
            fi
            DEPLOY="production"
          
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            # Push to main - deploy all services
            SERVICES='["user-service","social-service","notification-service","messaging-service","post-service"]'
            DEPLOY="staging"
          
          else
            # Push to develop or other branches - don't deploy
            SHOULD_DEPLOY="false"
            SERVICES='[]'
            DEPLOY="none"
          fi
          
          echo "services=$SERVICES" >> $GITHUB_OUTPUT
          echo "deploy=$DEPLOY" >> $GITHUB_OUTPUT
          echo "should_deploy=$SHOULD_DEPLOY" >> $GITHUB_OUTPUT
          
          echo "🎯 Services to deploy: $SERVICES"
          echo "🌍 Environment: $DEPLOY"
          echo "🚀 Should deploy: $SHOULD_DEPLOY"

  # ============================================================================
  # STAGE 5: DEPLOY - Build and push Docker images to registry
  # ============================================================================
  
  deploy:
    name: Deploy ${{ matrix.service }}
    runs-on: ubuntu-latest
    needs: [test, determine-deployment]
    if: needs.determine-deployment.outputs.should_deploy == 'true'
    
    strategy:
      fail-fast: false
      matrix:
        service: ${{ fromJson(needs.determine-deployment.outputs.services) }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        run: |
          SERVICE="${{ matrix.service }}"
          IMAGE_NAME="${{ secrets.DOCKERHUB_USERNAME }}/pulse-${SERVICE}"
          
          # Determine version and tags
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            TAG="${{ github.ref_name }}"
            if [[ "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              # Full version tag (e.g., v1.0.0)
              VERSION="${TAG#v}"
              TAGS="${IMAGE_NAME}:${VERSION},${IMAGE_NAME}:latest"
            else
              # Service-specific tag (e.g., user-service-v1.0.0)
              VERSION=$(echo "$TAG" | sed 's/.*-v//')
              TAGS="${IMAGE_NAME}:${VERSION},${IMAGE_NAME}:latest"
            fi
          else
            # Push to main branch
            SHORT_SHA=$(git rev-parse --short HEAD)
            TAGS="${IMAGE_NAME}:${SHORT_SHA},${IMAGE_NAME}:latest"
            VERSION="${SHORT_SHA}"
          fi
          
          echo "image_name=${IMAGE_NAME}" >> $GITHUB_OUTPUT
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          labels: |
            org.opencontainers.image.title=pulse-${{ matrix.service }}
            org.opencontainers.image.description=Pulse Microservices - ${{ matrix.service }}
            org.opencontainers.image.version=${{ steps.meta.outputs.version }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
      
      - name: Deployment summary
        run: |
          echo "✅ ${{ matrix.service }} deployed successfully"
          echo "📦 Image: ${{ steps.meta.outputs.image_name }}"
          echo "🏷️  Tags: ${{ steps.meta.outputs.tags }}"
          echo "🌍 Environment: ${{ needs.determine-deployment.outputs.deploy }}"

  # ============================================================================
  # STAGE 6: SUMMARY - Unified summary for PRs and Deployments
  # ============================================================================
  
  pipeline-summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [build, test, security-scan, determine-deployment, deploy]
    
    steps:
      # PR Comment Summary
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const buildStatus = '${{ needs.build.result }}';
            const testStatus = '${{ needs.test.result }}';
            const securityStatus = '${{ needs.security-scan.result }}';
            
            const statusEmoji = {
              'success': '✅',
              'failure': '❌',
              'cancelled': '⚠️',
              'skipped': '⏭️'
            };
            
            const body = `## 🚀 Microservices Pipeline Results
            
            ### Pipeline Stages
            ${statusEmoji[buildStatus] || '❓'} **Build**: ${buildStatus}
            ${statusEmoji[testStatus] || '❓'} **Test**: ${testStatus}
            ${statusEmoji[securityStatus] || '❓'} **Security Scan**: ${securityStatus}
            
            ### Services Processed
            - 📦 user-service
            - 📦 social-service
            - 📦 notification-service
            - 📦 messaging-service
            - 📦 post-service
            
            ${buildStatus === 'success' && testStatus === 'success' && securityStatus === 'success'
              ? '🎉 All checks passed! Ready to merge.' 
              : '⚠️ Some checks failed. Please review the details above.'}
            
            ---
            💡 **Note**: Deployment will occur automatically when merged to \`main\`
            `;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
      
      # Deployment Summary (for pushes to main and tags)
      - name: Create deployment summary
        if: needs.determine-deployment.outputs.should_deploy == 'true'
        run: |
          echo "# 🚀 Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Pipeline Stages
          echo "## Pipeline Stages" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Build: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Test: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Deploy: ${{ needs.deploy.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Deployment Information
          echo "## Deployment Information" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: ${{ needs.determine-deployment.outputs.deploy }}" >> $GITHUB_STEP_SUMMARY
          echo "**Ref**: ${{ github.ref }}" >> $GITHUB_STEP_SUMMARY
          echo "**SHA**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "✅ **Status**: All services deployed successfully!" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Status**: Some deployments failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Deployed Services" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          SERVICES='${{ needs.determine-deployment.outputs.services }}'
          echo "$SERVICES" | jq -r '.[]' | while read service; do
            echo "- 📦 \`${service}\`: https://hub.docker.com/r/kal0yan/pulse-${service}" >> $GITHUB_STEP_SUMMARY
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Pull Commands" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          
          SERVICES='${{ needs.determine-deployment.outputs.services }}'
          echo "$SERVICES" | jq -r '.[]' | while read service; do
            echo "docker pull kal0yan/pulse-${service}:latest" >> $GITHUB_STEP_SUMMARY
          done
          
          echo '```' >> $GITHUB_STEP_SUMMARY
      
      # Generic summary for other cases (non-PR, non-deployment)
      - name: Create generic summary
        if: github.event_name != 'pull_request' && needs.determine-deployment.outputs.should_deploy != 'true'
        run: |
          echo "# 🚀 Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Pipeline Stages" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Build: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Test: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Ref**: ${{ github.ref }}" >> $GITHUB_STEP_SUMMARY
          echo "**SHA**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
      
      - name: Notify on failure
        if: needs.deploy.result == 'failure'
        run: |
          echo "::error::Deployment failed for one or more services"
          exit 1

