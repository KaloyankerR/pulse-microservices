name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly on Monday at 9 AM UTC
    - cron: '0 9 * * 1'

jobs:
  sonarcloud-node:
    name: SonarCloud Analysis (Node.js)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [user-service, social-service]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better analysis
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ${{ matrix.service }}/package-lock.json
      
      - name: Install dependencies
        working-directory: ./${{ matrix.service }}
        run: npm ci
      
      - name: Generate Prisma Client
        working-directory: ./${{ matrix.service }}
        run: npm run db:generate
      
      - name: Run tests with coverage
        working-directory: ./${{ matrix.service }}
        run: npm run test:coverage
        env:
          NODE_ENV: test
        continue-on-error: true
      
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        with:
          projectBaseDir: ${{ matrix.service }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true

  code-metrics-go:
    name: Go Code Metrics
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [messaging-service, post-service]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache-dependency-path: ${{ matrix.service }}/go.sum
      
      - name: Install tools
        run: |
          go install github.com/fzipp/gocyclo/cmd/gocyclo@latest
          go install github.com/client9/misspell/cmd/misspell@latest
          go install golang.org/x/tools/cmd/goimports@latest
      
      - name: Check cyclomatic complexity
        working-directory: ./${{ matrix.service }}
        run: |
          echo "## Cyclomatic Complexity Report" >> $GITHUB_STEP_SUMMARY
          gocyclo -over 15 . || true
          echo "Checked cyclomatic complexity"
      
      - name: Check spelling
        working-directory: ./${{ matrix.service }}
        run: |
          misspell -error . || true
      
      - name: Check imports
        working-directory: ./${{ matrix.service }}
        run: |
          unformatted=$(goimports -l .)
          if [ -n "$unformatted" ]; then
            echo "Files with incorrect imports:"
            echo "$unformatted"
          fi

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate
          deny-licenses: GPL-2.0, GPL-3.0

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      fail-fast: false
      matrix:
        language: ['javascript', 'go']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality
      
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"

  lint-summary:
    name: Linting Summary
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - service: user-service
            type: node
          - service: social-service
            type: node
          - service: messaging-service
            type: go
          - service: post-service
            type: go
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Node.js linting
      - name: Setup Node.js
        if: matrix.type == 'node'
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ${{ matrix.service }}/package-lock.json
      
      - name: Install Node dependencies
        if: matrix.type == 'node'
        working-directory: ./${{ matrix.service }}
        run: npm ci
      
      - name: Run ESLint
        if: matrix.type == 'node'
        working-directory: ./${{ matrix.service }}
        run: |
          npm run lint -- --format json --output-file eslint-report.json || true
          npm run lint || true
      
      # Go linting
      - name: Setup Go
        if: matrix.type == 'go'
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache-dependency-path: ${{ matrix.service }}/go.sum
      
      - name: Run golangci-lint
        if: matrix.type == 'go'
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          working-directory: ./${{ matrix.service }}
          args: --timeout=5m
        continue-on-error: true
      
      - name: Upload lint results
        uses: actions/upload-artifact@v4
        with:
          name: lint-results-${{ matrix.service }}
          path: |
            ${{ matrix.service }}/eslint-report.json
            ${{ matrix.service }}/golangci-lint-report.json
        if: always()
        continue-on-error: true

  generate-report:
    name: Generate Quality Report
    needs: [lint-summary, code-metrics-go]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Generate summary
        run: |
          echo "# Code Quality Report ðŸ“Š" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Job Status" >> $GITHUB_STEP_SUMMARY
          echo "- Linting: ${{ needs.lint-summary.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Go Metrics: ${{ needs.code-metrics-go.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "View detailed reports in the job logs above." >> $GITHUB_STEP_SUMMARY

