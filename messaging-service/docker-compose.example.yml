# Example docker-compose configuration for messaging-service
# Add this to your main docker-compose.yml

version: '3.8'

services:
  messaging-service:
    build:
      context: ./messaging-service
      dockerfile: Dockerfile
    container_name: messaging-service
    ports:
      - "8084:8084"
    environment:
      - PORT=8084
      - ENVIRONMENT=production
      - MONGODB_URL=mongodb://mongodb:27017
      - MONGODB_NAME=messaging_db
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - mongodb
      - redis
      - rabbitmq
    networks:
      - pulse-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8084/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MongoDB for messaging service
  mongodb:
    image: mongo:7.0
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - pulse-network
    restart: unless-stopped

  # Redis for presence tracking
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - pulse-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # RabbitMQ for event messaging
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - pulse-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  mongodb_data:
  redis_data:
  rabbitmq_data:

networks:
  pulse-network:
    driver: bridge



