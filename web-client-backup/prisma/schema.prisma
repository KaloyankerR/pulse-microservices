// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  username        String?   @unique
  bio             String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  coverImage      String?
  profileImage    String?
  hashedPassword  String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  followingIds    String[]  @db.ObjectId
  hasNotification Boolean?
  location        String?
  website         String?
  birthday        DateTime?

  posts         Post[]
  comments      Comment[]
  notifications Notification[]
  events        Event[]
  eventRsvps    EventRSVP[]
  messages      Message[]
  
  // NextAuth relations
  accounts Account[]
  sessions Session[]
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
  likedIds  String[] @db.ObjectId

  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Comment Comment[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  createdAt DateTime @default(now())
  userId    String   @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Event {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String?
  eventDate     DateTime
  location      String?
  maxAttendees  Int?
  visibility    String   @default("public") // "public" or "private"
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String   @db.ObjectId

  user     User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  rsvps    EventRSVP[]
}

model EventRSVP {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  status      String   // "going", "maybe", "not_going"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   @db.ObjectId
  eventId     String   @db.ObjectId

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
}

model Chat {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userIds   String[] @db.ObjectId

  messages Message[]
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
  chatId    String   @db.ObjectId
  readBy    String[] @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

// NextAuth Models
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
